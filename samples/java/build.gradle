plugins {
    id("groovy")
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.3.8"
    id("io.micronaut.aot") version "4.3.8"
    id "io.micronaut.docker" version "4.3.8"
    id "name.remal.lombok" version "2.2.5"
}

version "4.0.0"
group "depotlifecycle"

repositories {
    mavenCentral()
}

dependencies {
    // Lombok provided by gradle program to ensure it runs prior to micronaut processors
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    implementation("io.micronaut.validation:micronaut-validation")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.reactor:micronaut-reactor")
    implementation("io.micronaut.reactor:micronaut-reactor-http-client")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.sql:micronaut-hibernate-jpa")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("io.micronaut:micronaut-management")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("com.h2database:h2")
    runtimeOnly("org.yaml:snakeyaml")
    aotPlugins platform("io.micronaut.platform:micronaut-platform:4.4.2")
    aotPlugins("io.micronaut.security:micronaut-security-aot")

    constraints {
        lombok 'org.projectlombok:lombok:1.18.28'
    }
}

application {
    mainClass.set("depotlifecycle.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("depotlifecycle.*")
    }
    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        configurationProperties.put("micronaut.security.jwks.enabled","false")
    }
}

boolean isCIBuild = System.getenv('CI') != null
docker {
    url = isCIBuild ? "tcp://127.0.0.1:2375" : "unix:///var/run/docker.sock"
}

compileJava.options.compilerArgs += '-parameters'

tasks.withType(io.micronaut.gradle.docker.MicronautDockerfile) {
    baseImage = baseDockerImage
    exposedPorts = [8086]
    targetWorkingDirectory = "/app"
    runCommand("mkdir -p /app && addgroup -g 1000 depotlifecycle && adduser -u 1000 -G depotlifecycle -h /app -D depotlifecycle")
    user( "depotlifecycle:depotlifecycle")
    environmentVariable("JAVA_TOOL_OPTIONS", "-XX:MaxRAMPercentage=80.0 -XX:InitialRAMPercentage=40.0 -Djava.awt.headless=true -Dfile.encoding=UTF-8")
}

if (hasProperty("debug")) {
    run.jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote', '-Xdebug', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5006')
}
else {
    run.jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}
